/**
 *  Application: NatoChat_Server
 *
 *  Represents the properties and behaviors of a client
 *  connected to a chatroom in the context of the
 *  NatoChat_Server application.
 *
 *  @author NatoTheGato
 *  @version 1.01 12/30/21
 */
package Model;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.NoSuchElementException;
import java.util.Scanner;
import java.util.concurrent.locks.ReentrantLock;

public class Client implements Runnable {

    //Declare Class Attributes for Client Connection
    private ChatRoom room;
    private Socket socket;
    private String username;
    private boolean nameRequested;

    //Declare Class Attributes for I/O and Thread Communciation
    private Scanner scnr;
    private PrintWriter writer;
    private ReentrantLock lock;

    /**
     * Default Client constructor for assigning generic values to class
     * attributes. This constructor should only be used for debugging purposes.
     */
    public Client() {
        this.room = null;
        this.socket = null;
        this.scnr = null;
        this.writer = null;
        this.username = null;
        this.lock = null;
        this.nameRequested = false;
    }

    /**
     * ChatRoom constructor for initializing the Client with a given Socket
     * connection and a ChatRoom.
     *
     * @param inf_room ChatRoom which initialized the client-server connection
     * @param inf_socket the Socket connection generated by the ChatRoom to
     * establish a connection
     */
    public Client(ChatRoom inf_room, Socket inf_socket) {
        try {
            this.room = inf_room;
            this.socket = inf_socket;
            this.username = "<user>";
            this.nameRequested = false;
            this.scnr = new Scanner(this.socket.getInputStream());
            this.writer = new PrintWriter(this.socket.getOutputStream());
            this.lock = new ReentrantLock();
        } 
        catch (IOException ioError) {
            this.room.getModel().notifyPresenter(
                    "[ERROR]: {source: " + this.room.getRoomName() + "} "
                            + "{" + ioError.toString() + "}");
        }
    }

    /**
     * Client constructor assigning informed values to class attributes. The
     * PrintWriter and Scanner class attributes are automatically generated
     * using the informed Socket connection.
     *
     * @param inf_room ChatRoom which initialized the client-server connection
     * @param inf_socket the Socket connection generated by the ChatRoom to
     * establish a connection
     * @param inf_username the displayable username of the Client
     */
    public Client(ChatRoom inf_room, Socket inf_socket, String inf_username) {
        try {
            this.room = inf_room;
            this.socket = inf_socket;
            this.username = inf_username;
            this.nameRequested = false;
            this.scnr = new Scanner(this.socket.getInputStream());
            this.writer = new PrintWriter(this.socket.getOutputStream());
            this.lock = new ReentrantLock();
        } 
        catch (IOException ioError) {
            this.room.getModel().notifyPresenter(
                    "[ERROR]: {source: " + this.room.getRoomName() + "} "
                            + "{" + ioError.toString() + "}");
        }
    }

    /**
     * Defines the behavior of the Client thread. It sends initialization
     * messages to the Client and then starts the connection with the other
     * Clients.
     */
    @Override
    public void run() {
        String clientMessage = "";
        String clientName = "";
        String serverMessage = "";
        String serverName = "[" + this.room.getRoomName() + "]: ";

        try {

            //Request for the new Client's username
            this.sendMessageToClient(serverName + "Please Enter Your Username");
            this.username = this.scnr.nextLine();
            clientName = "[" + this.username + "]: ";

            //Add the Client to the currently connected Clients in the ChatRoom
            this.room.getClients().add(this);
            this.room.getClientNames().add(this.username);

            //Notify the server that a new user connected to a ChatRoom
            this.room.getModel().notifyPresenter("[NOTIFICATION]: "
                    + this.username + " connected to "
                    + this.room.getRoomName() + ".");

            //Send all of the currently connected Clients to the new Client
            this.room.sendUsersToClient(this, serverName);

            /*
                Tell all currently connected Clients that a new Client has 
                entered the ChatRoom
            */
            this.room.broadcastClientMessage(this, serverName + "Welcome to the "
                    + "Chatroom " + this.username + "!");

            this.sendMessageToClient(serverName + "Welcome to the Chatroom "
                    + this.username + "!");

            /*
                Keep reading this Client's input until the ChatRoom or Client
                receives a Thread interrupt signal.
            */
            while (!Thread.interrupted()) {
                clientMessage = this.scnr.nextLine();
                serverMessage = clientName + clientMessage;
                this.room.broadcastClientMessage(this, serverMessage);
            }
            
            /*
                When the Thread interrupt signal is sent, remove this Client 
                from the ChatRoom.
            */
            this.room.removeClientFromChatRoom(this, this.username);
            
            //Notify room participants that a user has left
            this.room.broadcastClientMessage(this, serverName + 
                    this.username + " left the chatroom.");
            
            //Close the Socket connection
            this.socket.close();
        }
        catch (IOException ioError) {
            this.room.getModel().notifyPresenter(
                    "[ERROR]: {source: " + this.room.getRoomName() + "} "
                            + "{" + ioError.toString() + "}");
        } 
        /*
            Occurs if there is an issue with reading the Client's input stream.
            This error normally occurs when a user exits the NatoChat_Client
            application before disconnecting from the ChatRoom.
        */ 
        catch (NoSuchElementException noElementError) {
            try {
                this.room.removeClientFromChatRoom(this, this.username);
                
                this.room.broadcastClientMessage(this, serverName + 
                        this.username + " left the chatroom.");
                
                this.socket.close();
            }
            catch (IOException socketError) {
                this.room.getModel().notifyPresenter(
                        "[ERROR]: {source: " + this.room.getRoomName() + "} "
                                + "{" + socketError.toString() + "}");
            }
        }
    }

    /**
     * Uses the PrintWriter of the output stream to write a server message to 
     * the Client
     *
     * @param message the server message which usually comes from another Client
     */
    public void sendMessageToClient(String message) {
        this.writer.println(message);
        this.writer.flush();
    }
}
